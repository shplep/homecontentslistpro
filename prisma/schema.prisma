generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  name                   String?
  email                  String          @unique
  password               String
  phone                  String?
  address                String?
  role                   Role            @default(USER)
  passwordResetToken     String?         @map("password_reset_token")
  passwordResetExpiresAt DateTime?       @map("password_reset_expires_at")
  createdAt              DateTime        @default(now()) @map("created_at")
  updatedAt              DateTime        @updatedAt @map("updated_at")
  hasUsedTrial           Boolean         @default(false) @map("has_used_trial")
  requiresUpgrade        Boolean         @default(false) @map("requires_upgrade")
  trialEndsAt            DateTime?       @map("trial_ends_at")
  trialStartedAt         DateTime?       @map("trial_started_at")
  adminLogs              AdminLog[]      @relation("AdminActions")
  userLogs               AdminLog[]      @relation("UserActions")
  collaborations         Collaborator[]
  houses                 House[]
  insuranceInfo          InsuranceInfo[]
  notifications          Notification[]
  subscriptions          Subscription[]

  @@map("users")
}

model House {
  id            Int            @id @default(autoincrement())
  userId        Int            @map("user_id")
  name          String?
  address1      String         @map("address_1")
  address2      String?        @map("address_2")
  city          String
  state         String
  zipCode       String         @map("zip_code")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  collaborators Collaborator[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  insuranceInfo InsuranceInfo?
  rooms         Room[]

  @@index([userId], map: "houses_user_id_fkey")
  @@map("houses")
}

model InsuranceInfo {
  id           Int      @id @default(autoincrement())
  houseId      Int?     @unique @map("house_id")
  company      String
  address1     String   @map("address_1")
  address2     String?  @map("address_2")
  city         String
  state        String
  zipCode      String   @map("zip_code")
  agentName    String?  @map("agent_name")
  phoneNumber  String?  @map("phone_number")
  policyNumber String?  @map("policy_number")
  maxCoverage  Decimal? @map("max_coverage")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  claimNumber  String?  @map("claim_number")
  userId       Int?     @map("user_id")
  house        House?   @relation(fields: [houseId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "insurance_info_user_id_fkey")
  @@map("insurance_info")
}

model Room {
  id        Int      @id @default(autoincrement())
  houseId   Int      @map("house_id")
  name      String
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  items     Item[]
  house     House    @relation(fields: [houseId], references: [id], onDelete: Cascade)

  @@index([houseId], map: "rooms_house_id_fkey")
  @@map("rooms")
}

model Item {
  id           Int            @id @default(autoincrement())
  roomId       Int            @map("room_id")
  name         String
  serialNumber String?        @map("serial_number")
  brand        String?
  model        String?
  price        Decimal?       @db.Decimal(10, 2)
  quantity     Int            @default(1)
  purchaseDate DateTime?      @map("purchase_date")
  status       ItemStatus?
  condition    ItemCondition?
  notes        String?
  isImported   Boolean        @default(false) @map("is_imported")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  images       Image[]
  room         Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId], map: "items_room_id_fkey")
  @@map("items")
}

model Image {
  id        Int      @id @default(autoincrement())
  itemId    Int      @map("item_id")
  filename  String
  path      String
  size      Int
  mimeType  String   @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId], map: "images_item_id_fkey")
  @@map("images")
}

model Collaborator {
  id                Int                    @id @default(autoincrement())
  userId            Int                    @map("user_id")
  houseId           Int                    @map("house_id")
  collaboratorEmail String                 @map("collaborator_email")
  permissions       CollaboratorPermission
  invitedAt         DateTime               @default(now()) @map("invited_at")
  acceptedAt        DateTime?              @map("accepted_at")
  house             House                  @relation(fields: [houseId], references: [id], onDelete: Cascade)
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, houseId, collaboratorEmail])
  @@index([houseId], map: "collaborators_house_id_fkey")
  @@map("collaborators")
}

model InsuranceFormat {
  id             Int      @id @default(autoincrement())
  insurerName    String   @map("insurer_name")
  columnMappings Json     @map("column_mappings")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("insurance_formats")
}

model Notification {
  id      Int              @id @default(autoincrement())
  userId  Int              @map("user_id")
  message String
  type    NotificationType
  sentAt  DateTime         @default(now()) @map("sent_at")
  readAt  DateTime?        @map("read_at")
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "notifications_user_id_fkey")
  @@map("notifications")
}

model AdminLog {
  id        Int      @id @default(autoincrement())
  adminId   Int      @map("admin_id")
  userId    Int      @map("user_id")
  action    String
  timestamp DateTime @default(now())
  admin     User     @relation("AdminActions", fields: [adminId], references: [id])
  user      User     @relation("UserActions", fields: [userId], references: [id])

  @@index([adminId], map: "admin_logs_admin_id_fkey")
  @@index([userId], map: "admin_logs_user_id_fkey")
  @@map("admin_logs")
}

model DiscountCode {
  id            Int            @id @default(autoincrement())
  code          String         @unique
  promoterName  String         @map("promoter_name")
  promoFee      Int            @map("promo_fee")
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  subscriptions Subscription[]

  @@map("discount_codes")
}

model SubscriptionPlan {
  id               Int            @id @default(autoincrement())
  name             String         @unique
  displayName      String         @map("display_name")
  description      String?
  price            Int
  stripeProductId  String?        @unique @map("stripe_product_id")
  stripePriceId    String?        @unique @map("stripe_price_id")
  maxHouses        Int            @map("max_houses")
  maxRoomsPerHouse Int?           @map("max_rooms_per_house")
  maxItemsPerRoom  Int?           @map("max_items_per_room")
  isActive         Boolean        @default(true) @map("is_active")
  allowTrial       Boolean        @default(false) @map("allow_trial")
  sortOrder        Int            @default(0) @map("sort_order")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  subscriptions    Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   Int                @id @default(autoincrement())
  userId               Int                @map("user_id")
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  discountCodeId       Int?               @map("discount_code_id")
  planId               Int                @map("plan_id")
  status               SubscriptionStatus
  trialEndsAt          DateTime?          @map("trial_ends_at")
  currentPeriodStart   DateTime?          @map("current_period_start")
  currentPeriodEnd     DateTime?          @map("current_period_end")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  cancelAtPeriodEnd    Boolean            @default(false) @map("cancel_at_period_end")
  stripeCustomerId     String?            @map("stripe_customer_id")
  discountCode         DiscountCode?      @relation(fields: [discountCodeId], references: [id])
  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([discountCodeId], map: "subscriptions_discount_code_id_fkey")
  @@index([planId], map: "subscriptions_plan_id_fkey")
  @@index([userId], map: "subscriptions_user_id_fkey")
  @@map("subscriptions")
}

model SystemSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("faq")
}

enum Role {
  USER
  ADMIN
}

enum ItemStatus {
  NEW
  USED
  ANTIQUE
  HEIRLOOM
}

enum ItemCondition {
  BELOW_AVERAGE
  AVERAGE
  ABOVE_AVERAGE
  NEW
}

enum CollaboratorPermission {
  VIEW
  EDIT
}

enum NotificationType {
  EMAIL
  DASHBOARD
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
}
