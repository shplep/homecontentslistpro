// HomeContentsListPro Database Schema
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id                     Int      @id @default(autoincrement())
  name                   String?
  email                  String   @unique
  password               String
  phone                  String?
  address                String?
  role                   Role     @default(USER)
  passwordResetToken     String?  @map("password_reset_token")
  passwordResetExpiresAt DateTime? @map("password_reset_expires_at")
  
  // Trial and subscription tracking
  trialStartedAt         DateTime? @map("trial_started_at")
  trialEndsAt            DateTime? @map("trial_ends_at")
  hasUsedTrial           Boolean   @default(false) @map("has_used_trial")
  requiresUpgrade        Boolean   @default(false) @map("requires_upgrade")
  
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  houses        House[]
  collaborations Collaborator[]
  notifications Notification[]
  subscriptions Subscription[]
  adminLogs     AdminLog[]     @relation("AdminActions")
  userLogs      AdminLog[]     @relation("UserActions")
  insuranceInfo InsuranceInfo[]

  @@map("users")
}

// House management
model House {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  name      String?  // Optional house name for multiple properties
  address1  String   @map("address_1")
  address2  String?  @map("address_2")
  city      String
  state     String
  zipCode   String   @map("zip_code")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms         Room[]
  collaborators Collaborator[]
  insuranceInfo InsuranceInfo?

  @@map("houses")
}

// Insurance information for users and houses
model InsuranceInfo {
  id             Int     @id @default(autoincrement())
  userId         Int?    @map("user_id")           // User-level insurance (optional)
  houseId        Int?    @unique @map("house_id")   // House-level insurance (optional)
  company        String
  address1       String  @map("address_1")
  address2       String? @map("address_2")
  city           String
  state          String
  zipCode        String  @map("zip_code")
  agentName      String? @map("agent_name")
  phoneNumber    String? @map("phone_number")
  policyNumber   String? @map("policy_number")
  claimNumber    String? @map("claim_number")
  maxCoverage    Decimal? @map("max_coverage")
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  house House? @relation(fields: [houseId], references: [id], onDelete: Cascade)

  @@map("insurance_info")
}

// Room management
model Room {
  id        Int      @id @default(autoincrement())
  houseId   Int      @map("house_id")
  name      String
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  house House @relation(fields: [houseId], references: [id], onDelete: Cascade)
  items Item[]

  @@map("rooms")
}

// Item management
model Item {
  id            Int           @id @default(autoincrement())
  roomId        Int           @map("room_id")
  name          String
  serialNumber  String?       @map("serial_number")
  category      String?
  brand         String?
  model         String?
  price         Int?          // Price in cents
  dateAcquired  DateTime?     @map("date_acquired")
  status        ItemStatus?
  condition     ItemCondition?
  notes         String?
  isImported    Boolean       @default(false) @map("is_imported")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  room   Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  images Image[]

  @@map("items")
}

// Image storage
model Image {
  id        Int      @id @default(autoincrement())
  itemId    Int      @map("item_id")
  filename  String
  path      String
  size      Int
  mimeType  String   @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("images")
}

// Collaborator access
model Collaborator {
  id                Int                    @id @default(autoincrement())
  userId            Int                    @map("user_id")
  houseId           Int                    @map("house_id")
  collaboratorEmail String                 @map("collaborator_email")
  permissions       CollaboratorPermission
  invitedAt         DateTime               @default(now()) @map("invited_at")
  acceptedAt        DateTime?              @map("accepted_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  house House @relation(fields: [houseId], references: [id], onDelete: Cascade)

  @@unique([userId, houseId, collaboratorEmail])
  @@map("collaborators")
}

// Insurance report formats
model InsuranceFormat {
  id             Int    @id @default(autoincrement())
  insurerName    String @map("insurer_name")
  columnMappings Json   @map("column_mappings")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("insurance_formats")
}

// Notifications
model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  message   String
  type      NotificationType
  sentAt    DateTime         @default(now()) @map("sent_at")
  readAt    DateTime?        @map("read_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Admin action logging
model AdminLog {
  id        Int      @id @default(autoincrement())
  adminId   Int      @map("admin_id")
  userId    Int      @map("user_id")
  action    String
  timestamp DateTime @default(now())

  // Relations
  admin User @relation("AdminActions", fields: [adminId], references: [id])
  user  User @relation("UserActions", fields: [userId], references: [id])

  @@map("admin_logs")
}

// Discount codes for affiliate program
model DiscountCode {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  promoterName String   @map("promoter_name")
  promoFee     Int      @map("promo_fee") // Fee in cents
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  subscriptions Subscription[]

  @@map("discount_codes")
}

// Subscription plans configuration
model SubscriptionPlan {
  id                    Int      @id @default(autoincrement())
  name                  String   @unique
  displayName           String   @map("display_name")
  description           String?
  price                 Int      // Annual price in cents
  stripeProductId       String?  @unique @map("stripe_product_id")
  stripePriceId         String?  @unique @map("stripe_price_id")
  
  // Usage limits
  maxHouses             Int      @map("max_houses")
  maxRoomsPerHouse      Int?     @map("max_rooms_per_house") // null = unlimited
  maxItemsPerRoom       Int?     @map("max_items_per_room")  // null = unlimited
  
  // Plan features and settings
  isActive              Boolean  @default(true) @map("is_active")
  allowTrial            Boolean  @default(false) @map("allow_trial")
  sortOrder             Int      @default(0) @map("sort_order")
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  subscriptions         Subscription[]

  @@map("subscription_plans")
}

// Subscription management
model Subscription {
  id                   Int             @id @default(autoincrement())
  userId               Int             @map("user_id")
  stripeSubscriptionId String?         @unique @map("stripe_subscription_id")
  stripeCustomerId     String?         @map("stripe_customer_id")
  discountCodeId       Int?            @map("discount_code_id")
  planId               Int             @map("plan_id")
  status               SubscriptionStatus
  trialEndsAt          DateTime?       @map("trial_ends_at")
  currentPeriodStart   DateTime?       @map("current_period_start")
  currentPeriodEnd     DateTime?       @map("current_period_end")
  cancelAtPeriodEnd    Boolean         @default(false) @map("cancel_at_period_end")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan         SubscriptionPlan  @relation(fields: [planId], references: [id])
  discountCode DiscountCode?     @relation(fields: [discountCodeId], references: [id])

  @@map("subscriptions")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum ItemStatus {
  NEW
  USED
  ANTIQUE
  HEIRLOOM
}

enum ItemCondition {
  BELOW_AVERAGE
  AVERAGE
  ABOVE_AVERAGE
  NEW
}

enum CollaboratorPermission {
  VIEW
  EDIT
}

enum NotificationType {
  EMAIL
  DASHBOARD
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
}
